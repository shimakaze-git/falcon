# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019 Falcon Contributors
# This file is distributed under the same license as the Falcon package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Falcon 1.4dev1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-06 19:36+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../api/testing.rst:4
msgid "Testing"
msgstr ""

#: ../../api/testing.rst:7
msgid "Reference"
msgstr ""

#: falcon.testing:1 of
msgid "Functional testing framework for Falcon apps and Falcon itself."
msgstr ""

#: falcon.testing:3 of
msgid ""
"Falcon's testing module contains various test classes and utility "
"functions to support functional testing for both Falcon-based apps and "
"the Falcon framework itself."
msgstr ""

#: falcon.testing:7 of
msgid "The testing framework supports both unittest and pytest::"
msgstr ""

#: falcon.testing.Result:1 of
msgid "Encapsulates the result of a simulated WSGI request."
msgstr ""

#: falcon.testing.Cookie falcon.testing.Result falcon.testing.TestClient
#: falcon.testing.rand_string falcon.testing.simulate_delete
#: falcon.testing.simulate_get falcon.testing.simulate_head
#: falcon.testing.simulate_options falcon.testing.simulate_patch
#: falcon.testing.simulate_post falcon.testing.simulate_put of
msgid "Parameters"
msgstr ""

#: falcon.testing.Result:3 of
msgid "An iterable that yields zero or more bytestrings, per PEP-3333"
msgstr ""

#: falcon.testing.Result:6 of
msgid "An HTTP status string, including status code and reason string"
msgstr ""

#: falcon.testing.Result:9 of
msgid "A list of (header_name, header_value) tuples, per PEP-3333"
msgstr ""

#: falcon.testing.Result:15 of
msgid "*str* -- HTTP status string given in the response"
msgstr ""

#: falcon.testing.Result:19 of
msgid "*int* -- The code portion of the HTTP status string"
msgstr ""

#: falcon.testing.Result:23 of
msgid ""
"*CaseInsensitiveDict* -- A case-insensitive dictionary containing all the"
" headers in the response, except for cookies, which may be accessed via "
"the `cookies` attribute."
msgstr ""

#: falcon.testing.Result:30 of
msgid ""
"Multiple instances of a header in the response are currently not "
"supported; it is unspecified which value will \"win\" and be represented "
"in `headers`."
msgstr ""

#: falcon.testing.Result:36 of
msgid ""
"*dict* -- A dictionary of :py:class:`falcon.testing.Cookie` values parsed"
" from the response, by name."
msgstr ""

#: falcon.testing.Result:42 of
msgid ""
"*str* -- Text encoding of the response body, or ``None`` if the encoding "
"can not be determined."
msgstr ""

#: falcon.testing.Result:47 of
msgid "*bytes* -- Raw response body, or ``bytes`` if the response body was empty."
msgstr ""

#: falcon.testing.Result:52 of
msgid ""
"*str* -- Decoded response body of type ``unicode`` under Python 2.6 and "
"2.7, and of type ``str`` otherwise. If the content type does not specify "
"an encoding, UTF-8 is assumed."
msgstr ""

#: falcon.testing.Result:59 of
msgid ""
"*dict* -- Deserialized JSON body. Raises an error if the body is empty or"
" not JSON."
msgstr ""

#: falcon.testing.Cookie:1 of
msgid "Represents a cookie returned by a simulated request."
msgstr ""

#: falcon.testing.Cookie:3 of
msgid "A ``Morsel`` object from which to derive the cookie data."
msgstr ""

#: falcon.testing.Cookie:8 of
msgid "*str* -- The cookie's name."
msgstr ""

#: falcon.testing.Cookie:12 of
msgid "*str* -- The value of the cookie."
msgstr ""

#: falcon.testing.Cookie:16 of
msgid ""
"*datetime.datetime* -- Expiration timestamp for the cookie, or ``None`` "
"if not specified."
msgstr ""

#: falcon.testing.Cookie:21 of
msgid ""
"*str* -- The path prefix to which this cookie is restricted, or ``None`` "
"if not specified."
msgstr ""

#: falcon.testing.Cookie:26 of
msgid ""
"*str* -- The domain to which this cookie is restricted, or ``None`` if "
"not specified."
msgstr ""

#: falcon.testing.Cookie:31 of
msgid ""
"*int* -- The lifetime of the cookie in seconds, or ``None`` if not "
"specified."
msgstr ""

#: falcon.testing.Cookie:36 of
msgid ""
"*bool* -- Whether or not the cookie may only only be transmitted from the"
" client via HTTPS."
msgstr ""

#: falcon.testing.Cookie:41 of
msgid ""
"*bool* -- Whether or not the cookie may only be included in unscripted "
"requests from the client."
msgstr ""

#: falcon.testing.TestClient.simulate_request:1
#: falcon.testing.simulate_request:1 of
msgid "Simulates a request to a WSGI application."
msgstr ""

#: falcon.testing.simulate_request:3 of
msgid ""
"Performs a request against a WSGI application. Uses "
":any:`wsgiref.validate` to ensure the response is valid WSGI."
msgstr ""

#: falcon.testing.SimpleTestResource falcon.testing.TestClient
#: falcon.testing.create_environ falcon.testing.simulate_delete
#: falcon.testing.simulate_get falcon.testing.simulate_head
#: falcon.testing.simulate_options falcon.testing.simulate_patch
#: falcon.testing.simulate_post falcon.testing.simulate_put
#: falcon.testing.simulate_request of
msgid "Keyword Arguments"
msgstr ""

#: falcon.testing.simulate_delete:7 falcon.testing.simulate_get:7
#: falcon.testing.simulate_head:7 falcon.testing.simulate_options:7
#: falcon.testing.simulate_patch:7 falcon.testing.simulate_post:7
#: falcon.testing.simulate_put:7 falcon.testing.simulate_request:7 of
msgid "The WSGI application to call"
msgstr ""

#: falcon.testing.simulate_request:9 of
msgid "An HTTP method to use in the request (default: 'GET')"
msgstr ""

#: falcon.testing.simulate_request:12 of
msgid "The URL path to request (default: '/')"
msgstr ""

#: falcon.testing.simulate_delete:28 falcon.testing.simulate_get:38
#: falcon.testing.simulate_head:32 falcon.testing.simulate_options:28
#: falcon.testing.simulate_patch:38 falcon.testing.simulate_post:38
#: falcon.testing.simulate_put:38 falcon.testing.simulate_request:14 of
msgid "The protocol to use for the URL scheme (default: 'http')"
msgstr ""

#: falcon.testing.simulate_delete:12 falcon.testing.simulate_get:12
#: falcon.testing.simulate_head:12 falcon.testing.simulate_options:12
#: falcon.testing.simulate_patch:12 falcon.testing.simulate_post:12
#: falcon.testing.simulate_put:12 falcon.testing.simulate_request:16 of
msgid ""
"A dictionary of query string parameters, where each key is a parameter "
"name, and each value is either a ``str`` or something that can be "
"converted into a ``str``, or a list of such values. If a ``list``, the "
"value will be converted to a comma-delimited string of values (e.g., "
"'thing=1,2,3')."
msgstr ""

#: falcon.testing.simulate_delete:19 falcon.testing.simulate_get:19
#: falcon.testing.simulate_head:19 falcon.testing.simulate_options:19
#: falcon.testing.simulate_patch:19 falcon.testing.simulate_post:19
#: falcon.testing.simulate_put:19 falcon.testing.simulate_request:23 of
msgid ""
"Set to ``False`` to encode list values in query string params by "
"specifying multiple instances of the parameter (e.g., "
"'thing=1&thing=2&thing=3'). Otherwise, parameters will be encoded as "
"comma-separated values (e.g., 'thing=1,2,3'). Defaults to ``True``."
msgstr ""

#: falcon.testing.simulate_get:25 falcon.testing.simulate_head:25
#: falcon.testing.simulate_request:29 of
msgid ""
"A raw query string to include in the request (default: ``None``). If "
"specified, overrides `params`."
msgstr ""

#: falcon.testing.simulate_delete:25 falcon.testing.simulate_get:29
#: falcon.testing.simulate_head:29 falcon.testing.simulate_options:25
#: falcon.testing.simulate_patch:25 falcon.testing.simulate_post:25
#: falcon.testing.simulate_put:25 falcon.testing.simulate_request:33 of
msgid "Additional headers to include in the request (default: ``None``)"
msgstr ""

#: falcon.testing.simulate_patch:28 falcon.testing.simulate_post:28
#: falcon.testing.simulate_put:28 falcon.testing.simulate_request:36 of
msgid ""
"A string to send as the body of the request. Accepts both byte strings "
"and Unicode strings (default: ``None``). If a Unicode string is provided,"
" it will be encoded as UTF-8 in the request."
msgstr ""

#: falcon.testing.simulate_patch:33 falcon.testing.simulate_post:33
#: falcon.testing.simulate_put:33 falcon.testing.simulate_request:41 of
msgid ""
"A JSON document to serialize as the body of the request (default: "
"``None``). If specified, overrides `body` and the Content-Type header in "
"`headers`."
msgstr ""

#: falcon.testing.simulate_get:32 falcon.testing.simulate_request:46 of
msgid ""
"Callable that returns an iterable, to be used as the value for "
"*wsgi.file_wrapper* in the environ (default: ``None``). This can be used "
"to test high-performance file transmission when `resp.stream` is set to a"
" file-like object."
msgstr ""

#: falcon.testing.create_environ:35 falcon.testing.simulate_request:52 of
msgid "The stream to use as *wsgierrors* (default ``sys.stderr``)"
msgstr ""

#: falcon.testing.simulate_request of
msgid "Returns"
msgstr ""

#: falcon.testing.simulate_request:56 of
msgid "The result of the request"
msgstr ""

#: falcon.testing.simulate_request of
msgid "Return type"
msgstr ""

#: falcon.testing.simulate_request:57 of
msgid ":py:class:`~.Result`"
msgstr ""

#: falcon.testing.TestClient.simulate_get:1 falcon.testing.simulate_get:1 of
msgid "Simulates a GET request to a WSGI application."
msgstr ""

#: falcon.testing.simulate_delete:3 falcon.testing.simulate_get:3
#: falcon.testing.simulate_head:3 falcon.testing.simulate_options:3
#: falcon.testing.simulate_patch:3 falcon.testing.simulate_post:3
#: falcon.testing.simulate_put:3 of
msgid "Equivalent to::"
msgstr ""

#: falcon.testing.simulate_delete:9 falcon.testing.simulate_get:9
#: falcon.testing.simulate_head:9 falcon.testing.simulate_options:9
#: falcon.testing.simulate_patch:9 falcon.testing.simulate_post:9
#: falcon.testing.simulate_put:9 of
msgid "The URL path to request"
msgstr ""

#: falcon.testing.TestClient.simulate_head:1 falcon.testing.simulate_head:1 of
msgid "Simulates a HEAD request to a WSGI application."
msgstr ""

#: falcon.testing.TestClient.simulate_post:1 falcon.testing.simulate_post:1 of
msgid "Simulates a POST request to a WSGI application."
msgstr ""

#: falcon.testing.TestClient.simulate_put:1 falcon.testing.simulate_put:1 of
msgid "Simulates a PUT request to a WSGI application."
msgstr ""

#: falcon.testing.TestClient.simulate_options:1
#: falcon.testing.simulate_options:1 of
msgid "Simulates an OPTIONS request to a WSGI application."
msgstr ""

#: falcon.testing.TestClient.simulate_patch:1 falcon.testing.simulate_patch:1
#: of
msgid "Simulates a PATCH request to a WSGI application."
msgstr ""

#: falcon.testing.TestClient.simulate_delete:1 falcon.testing.simulate_delete:1
#: of
msgid "Simulates a DELETE request to a WSGI application."
msgstr ""

#: falcon.testing.TestClient:1 of
msgid "Simulates requests to a WSGI application."
msgstr ""

#: falcon.testing.TestClient:3 of
msgid ""
"This class provides a contextual wrapper for Falcon's `simulate_*` test "
"functions. It lets you replace this::"
msgstr ""

#: falcon.testing.TestClient:9 of
msgid "with this::"
msgstr ""

#: falcon.testing.TestClient:17 of
msgid ""
"The methods all call ``self.simulate_request()`` for convenient "
"overriding of request preparation by child classes."
msgstr ""

#: falcon.testing.TestClient:20 of
msgid "A WSGI application to target when simulating requests"
msgstr ""

#: falcon.testing.TestClient:24 of
msgid ""
"Default headers to set on every request (default ``None``). These "
"defaults may be overridden by passing values for the same headers to one "
"of the `simulate_*()` methods."
msgstr ""

#: falcon.testing.TestClient.simulate_delete:3 of
msgid "(See also: :py:meth:`falcon.testing.simulate_delete`)"
msgstr ""

#: falcon.testing.TestClient.simulate_get:3 of
msgid "(See also: :py:meth:`falcon.testing.simulate_get`)"
msgstr ""

#: falcon.testing.TestClient.simulate_head:3 of
msgid "(See also: :py:meth:`falcon.testing.simulate_head`)"
msgstr ""

#: falcon.testing.TestClient.simulate_options:3 of
msgid "(See also: :py:meth:`falcon.testing.simulate_options`)"
msgstr ""

#: falcon.testing.TestClient.simulate_patch:3 of
msgid "(See also: :py:meth:`falcon.testing.simulate_patch`)"
msgstr ""

#: falcon.testing.TestClient.simulate_post:3 of
msgid "(See also: :py:meth:`falcon.testing.simulate_post`)"
msgstr ""

#: falcon.testing.TestClient.simulate_put:3 of
msgid "(See also: :py:meth:`falcon.testing.simulate_put`)"
msgstr ""

#: falcon.testing.TestClient.simulate_request:3 of
msgid ""
"Wraps :py:meth:`falcon.testing.simulate_request` to perform a WSGI "
"request directly against ``self.app``. Equivalent to::"
msgstr ""

#: falcon.testing.TestCase:1 of
msgid "Extends :py:mod:`unittest` to support WSGI functional testing."
msgstr ""

#: falcon.testing.TestCase:5 of
msgid "If available, uses :py:mod:`testtools` in lieu of :py:mod:`unittest`."
msgstr ""

#: falcon.testing.TestCase:8 of
msgid ""
"This base class provides some extra plumbing for unittest-style test "
"cases, to help simulate WSGI calls without having to spin up an actual "
"web server. Various simulation methods are derived from "
":py:class:`falcon.testing.TestClient`."
msgstr ""

#: falcon.testing.TestCase:13 of
msgid ""
"Simply inherit from this class in your test case classes instead of "
":py:class:`unittest.TestCase` or :py:class:`testtools.TestCase`."
msgstr ""

#: falcon.testing.TestCase:18 of
msgid ""
"*object* -- A WSGI application to target when simulating requests "
"(default: ``falcon.API()``). When testing your application, you will need"
" to set this to your own instance of ``falcon.API``. For example::"
msgstr ""

#: falcon.testing.TestCase:46 of
msgid "*object* -- Deprecated alias for ``app``"
msgstr ""

#: falcon.testing.TestCase:50 of
msgid ""
"*callable* -- Deprecated class variable; will be removed in a future "
"release."
msgstr ""

#: falcon.testing.TestCase.setUp:1 of
msgid "Hook method for setting up the test fixture before exercising it."
msgstr ""

#: falcon.testing.SimpleTestResource:1 of
msgid "Mock resource for functional testing of framework components."
msgstr ""

#: falcon.testing.SimpleTestResource:3 of
msgid ""
"This class implements a simple test resource that can be extended as "
"needed to test middleware, hooks, and the Falcon framework itself."
msgstr ""

#: falcon.testing.SimpleTestResource:7 of
msgid ""
"Only noop ``on_get()`` and ``on_post()`` responders are implemented; when"
" overriding these, or adding additional responders in child classes, they"
" can be decorated with the "
":py:meth:`falcon.testing.capture_responder_args` hook in order to capture"
" the *req*, *resp*, and *params* arguments that are passed to the "
"responder. Responders may also be decorated with the "
":py:meth:`falcon.testing.set_resp_defaults` hook in order to set *resp* "
"properties to default *status*, *body*, and *header* values."
msgstr ""

#: falcon.testing.SimpleTestResource:17 of
msgid "Default status string to use in responses"
msgstr ""

#: falcon.testing.SimpleTestResource:19 of
msgid "Default body string to use in responses"
msgstr ""

#: falcon.testing.SimpleTestResource:21 of
msgid ""
"Default JSON document to use in responses. Will be serialized to a string"
" and encoded as UTF-8. Either *json* or *body* may be specified, but not "
"both."
msgstr ""

#: falcon.testing.SimpleTestResource:25 of
msgid "Default set of additional headers to include in responses"
msgstr ""

#: falcon.testing.SimpleTestResource:31 of
msgid "*bool* -- Whether or not a req/resp was captured."
msgstr ""

#: falcon.testing.SimpleTestResource:35 of
msgid ""
"*falcon.Request* -- The last Request object passed into any one of the "
"responder methods."
msgstr ""

#: falcon.testing.SimpleTestResource:40 of
msgid ""
"*falcon.Response* -- The last Response object passed into any one of the "
"responder methods."
msgstr ""

#: falcon.testing.SimpleTestResource:45 of
msgid ""
"*dict* -- The last dictionary of kwargs, beyond ``req`` and ``resp``, "
"that were passed into any one of the responder methods."
msgstr ""

#: falcon.testing.StartResponseMock:1 of
msgid "Mock object representing a WSGI `start_response` callable."
msgstr ""

#: falcon.testing.StartResponseMock:5 of
msgid "*int* -- Number of times `start_response` was called."
msgstr ""

#: falcon.testing.StartResponseMock:9 of
msgid "*str* -- HTTP status line, e.g. '785 TPS Cover Sheet not attached'."
msgstr ""

#: falcon.testing.StartResponseMock:14 of
msgid "*list* -- Raw headers list passed to `start_response`, per PEP-333."
msgstr ""

#: falcon.testing.StartResponseMock:19 of
msgid ""
"*dict* -- Headers as a case-insensitive ``dict``-like object, instead of "
"a ``list``."
msgstr ""

#: falcon.testing.capture_responder_args:1 of
msgid "Before hook for capturing responder arguments."
msgstr ""

#: falcon.testing.capture_responder_args:3 of
msgid "Adds the following attributes to the hooked responder's resource class:"
msgstr ""

#: falcon.testing.capture_responder_args:6 of
msgid "captured_req"
msgstr ""

#: falcon.testing.capture_responder_args:7 of
msgid "captured_resp"
msgstr ""

#: falcon.testing.capture_responder_args:8 of
msgid "captured_kwargs"
msgstr ""

#: falcon.testing.rand_string:1 of
msgid "Returns a randomly-generated string, of a random length."
msgstr ""

#: falcon.testing.rand_string:3 of
msgid "Minimum string length to return, inclusive"
msgstr ""

#: falcon.testing.rand_string:5 of
msgid "Maximum string length to return, inclusive"
msgstr ""

#: falcon.testing.create_environ:1 of
msgid "Creates a mock PEP-3333 environ ``dict`` for simulating WSGI requests."
msgstr ""

#: falcon.testing.create_environ:3 of
msgid "The path for the request (default '/')"
msgstr ""

#: falcon.testing.create_environ:5 of
msgid "The query string to simulate, without a leading '?' (default '')"
msgstr ""

#: falcon.testing.create_environ:8 of
msgid ""
"The HTTP protocol to simulate (default 'HTTP/1.1'). If set to 'HTTP/1.0',"
" the Host header will not be added to the environment."
msgstr ""

#: falcon.testing.create_environ:12 of
msgid "URL scheme, either 'http' or 'https' (default 'http')"
msgstr ""

#: falcon.testing.create_environ:14 of
msgid "Hostname for the request (default 'falconframework.org')"
msgstr ""

#: falcon.testing.create_environ:16 of
msgid ""
"The TCP port to simulate. Defaults to the standard port used by the given"
" scheme (i.e., 80 for 'http' and 443 for 'https')."
msgstr ""

#: falcon.testing.create_environ:20 of
msgid "Headers as a ``dict`` or an iterable yielding (*key*, *value*) ``tuple``'s"
msgstr ""

#: falcon.testing.create_environ:23 of
msgid ""
"Value for the ``SCRIPT_NAME`` environ variable, described in PEP-333: "
"'The initial portion of the request URL's \"path\" that corresponds to "
"the application object, so that the application knows its virtual "
"\"location\". This may be an empty string, if the application corresponds"
" to the \"root\" of the server.' (default '')"
msgstr ""

#: falcon.testing.create_environ:29 of
msgid ""
"The body of the request (default ''). Accepts both byte strings and "
"Unicode strings. Unicode strings are encoded as UTF-8 in the request."
msgstr ""

#: falcon.testing.create_environ:33 of
msgid "The HTTP method to use (default 'GET')"
msgstr ""

#: falcon.testing.create_environ:38 of
msgid ""
"Callable that returns an iterable, to be used as the value for "
"*wsgi.file_wrapper* in the environ."
msgstr ""

#: falcon.testing.redirected:1 of
msgid "A context manager to temporarily redirect stdout or stderr"
msgstr ""

#: falcon.testing.redirected:3 of
msgid "e.g.:"
msgstr ""

#: falcon.testing.redirected:5 of
msgid "with redirected(stderr=os.devnull):"
msgstr ""

#: falcon.testing.redirected:6 of
msgid "..."
msgstr ""

