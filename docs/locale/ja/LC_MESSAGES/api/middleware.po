# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019 Falcon Contributors
# This file is distributed under the same license as the Falcon package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Falcon 1.4dev1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-06 19:36+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../api/middleware.rst:4
msgid "Middleware"
msgstr ""

#: ../../api/middleware.rst:6
msgid ""
"Middleware components provide a way to execute logic before the framework"
" routes each request, after each request is routed but before the target "
"responder is called, or just before the response is returned for each "
"request. Components are registered with the `middleware` kwarg when "
"instantiating Falcon's :ref:`API class <api>`."
msgstr ""

#: ../../api/middleware.rst:13
msgid "Unlike hooks, middleware methods apply globally to the entire API."
msgstr ""

#: ../../api/middleware.rst:15
msgid "Falcon's middleware interface is defined as follows:"
msgstr ""

#: ../../api/middleware.rst:65
msgid ""
"Because *process_request* executes before routing has occurred, if a "
"component modifies ``req.path`` in its *process_request* method, the "
"framework will use the modified value to route the request."
msgstr ""

#: ../../api/middleware.rst:70
msgid ""
"The *process_resource* method is only called when the request matches a "
"route to a resource. To take action when a route is not found, a "
":py:meth:`sink <falcon.API.add_sink>` may be used instead."
msgstr ""

#: ../../api/middleware.rst:75
msgid ""
"In order to pass data from a middleware function to a resource function "
"use the ``req.context`` and ``resp.context`` dictionaries. These context "
"dictionaries are intended to hold request and response data specific to "
"your app as it passes through the framework."
msgstr ""

#: ../../api/middleware.rst:80
msgid ""
"Each component's *process_request*, *process_resource*, and "
"*process_response* methods are executed hierarchically, as a stack, "
"following the ordering of the list passed via the `middleware` kwarg of "
":ref:`falcon.API<api>`. For example, if a list of middleware objects are "
"passed as ``[mob1, mob2, mob3]``, the order of execution is as follows::"
msgstr ""

#: ../../api/middleware.rst:97
msgid ""
"Note that each component need not implement all `process_*` methods; in "
"the case that one of the three methods is missing, it is treated as a "
"noop in the stack. For example, if ``mob2`` did not implement "
"*process_request* and ``mob3`` did not implement *process_response*, the "
"execution order would look like this::"
msgstr ""

#: ../../api/middleware.rst:115
msgid ""
"If one of the *process_request* middleware methods raises an error, it "
"will be processed according to the error type. If the type matches a "
"registered error handler, that handler will be invoked and then the "
"framework will begin to unwind the stack, skipping any lower layers. The "
"error handler may itself raise an instance of HTTPError, in which case "
"the framework will use the latter exception to update the *resp* object."
msgstr ""

#: ../../api/middleware.rst:123
msgid ""
"Regardless, the framework will continue unwinding the middleware stack. "
"For example, if *mob2.process_request* were to raise an error, the "
"framework would execute the stack as follows::"
msgstr ""

#: ../../api/middleware.rst:137
msgid ""
"As illustrated above, by default, all *process_response* methods will be "
"executed, even when a *process_request*, *process_resource*, or resource "
"responder raises an error. This behavior is controlled by the :ref:`API "
"class's <api>` `independent_middleware` keyword argument."
msgstr ""

#: ../../api/middleware.rst:142
msgid ""
"Finally, if one of the *process_response* methods raises an error, or the"
" routed ``on_*`` responder method itself raises an error, the exception "
"will be handled in a similar manner as above. Then, the framework will "
"execute any remaining middleware on the stack."
msgstr ""

